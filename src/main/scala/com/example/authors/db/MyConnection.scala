package com.example.authors.db

import org.slf4j.LoggerFactory

import java.sql.{Connection, PreparedStatement, ResultSet}
import java.util.UUID

class MyPrepareStatement(
    private val id: UUID,
    private val stmt: PreparedStatement
) extends PreparedStatement:
  private val logger = LoggerFactory.getLogger(classOf[MyPrepareStatement])
  export stmt.{executeQuery as _, *}

  override def executeQuery(): ResultSet = {
    logger
      .atInfo()
      .addKeyValue("statementExecuteId", id.toString)
      .setMessage("Query execute")
      .log()
    val rs = stmt.executeQuery()
    logger
      .atInfo()
      .addKeyValue("statementExecuteId", id.toString)
      .setMessage("Query executed")
      .log()
    rs
  }
  override def executeQuery(sql: String): ResultSet = {
    logger
      .atInfo()
      .addKeyValue("statementExecuteId", id.toString)
      .setMessage("Query execute")
      .log()
    val rs = stmt.executeQuery(sql)
    logger
      .atInfo()
      .addKeyValue("statementExecuteId", id.toString)
      .setMessage("Query executed")
      .log()
    rs
  }

object MyPrepareStatement:
  def apply(stmt: PreparedStatement): MyPrepareStatement =
    new MyPrepareStatement(UUID.randomUUID(), stmt)

class MyConnection(private val conn: Connection) extends Connection:
  export conn.{prepareStatement as _, *}

  private val logger = LoggerFactory.getLogger(classOf[MyConnection])
  override def prepareStatement(sql: String): PreparedStatement = {
    MyPrepareStatement(conn.prepareStatement(sql))
  }

  override def prepareStatement(
      sql: String,
      resultSetType: Int,
      resultSetConcurrency: Int
  ): PreparedStatement = MyPrepareStatement(
    conn.prepareStatement(sql, resultSetType, resultSetConcurrency)
  )

  override def prepareStatement(
      sql: String,
      resultSetType: Int,
      resultSetConcurrency: Int,
      resultSetHoldability: Int
  ): PreparedStatement = MyPrepareStatement(
    conn.prepareStatement(
      sql,
      resultSetType,
      resultSetConcurrency,
      resultSetHoldability
    )
  )

  override def prepareStatement(
      sql: String,
      autoGeneratedKeys: Int
  ): PreparedStatement = MyPrepareStatement(
    conn.prepareStatement(sql, autoGeneratedKeys)
  )

  override def prepareStatement(
      sql: String,
      columnIndexes: Array[Int]
  ): PreparedStatement = MyPrepareStatement(
    conn.prepareStatement(sql, columnIndexes)
  )

  override def prepareStatement(
      sql: String,
      columnNames: Array[String]
  ): PreparedStatement = MyPrepareStatement(
    conn.prepareStatement(sql, columnNames)
  )
