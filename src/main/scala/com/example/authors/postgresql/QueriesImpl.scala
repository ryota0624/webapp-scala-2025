// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package com.example.authors.postgresql

import java.sql.Connection
import java.sql.SQLException
import java.sql.Statement
import java.util.UUID
import scala.util.Using

val createAuthorSQL = """-- name: createAuthor :one
INSERT INTO authors (
    name, bio
) VALUES (
             ?, ?
         )
RETURNING id, name, bio
"""

val deleteAuthorSQL = """-- name: deleteAuthor :exec
DELETE FROM authors
WHERE id = ?
"""

val getAuthorSQL = """-- name: getAuthor :one
SELECT id, name, bio FROM authors
WHERE id = ? LIMIT 1
"""

val listAuthorsSQL = """-- name: listAuthors :many
SELECT id, name, bio FROM authors
ORDER BY name
"""

class QueriesImpl(private val conn: Connection) extends Queries {

  override def createAuthor(name: String, bio: Option[String]): Option[Author] = {
    Using.resource(conn.prepareStatement(createAuthorSQL)) { stmt =>
      stmt.setString(1, name)
          stmt.setString(2, bio.orNull)

      val results = stmt.executeQuery()
      Option.when(results.next()) {
        val ret = Author(
                results.getObject(1).asInstanceOf[UUID],
                results.getString(2),
                Option(results.getObject(3)).map { _ => results.getString(3) }
            )
        if (results.next()) {
          throw SQLException("expected one row in result set, but got many")
        }
        ret
      }
    }
  }

  override def deleteAuthor(id: UUID): Unit = {
    Using.resource(conn.prepareStatement(deleteAuthorSQL)) { stmt =>
      stmt.setObject(1, id)

      stmt.execute()
    }
  }

  override def getAuthor(id: UUID): Option[Author] = {
    Using.resource(conn.prepareStatement(getAuthorSQL)) { stmt =>
      stmt.setObject(1, id)

      val results = stmt.executeQuery()
      Option.when(results.next()) {
        val ret = Author(
                results.getObject(1).asInstanceOf[UUID],
                results.getString(2),
                Option(results.getObject(3)).map { _ => results.getString(3) }
            )
        if (results.next()) {
          throw SQLException("expected one row in result set, but got many")
        }
        ret
      }
    }
  }

  override def listAuthors(): List[Author] = {
    Using.resource(conn.prepareStatement(listAuthorsSQL)) { stmt =>
      
      val results = stmt.executeQuery()
      val ret = scala.collection.mutable.ListBuffer.empty[Author]
      while (results.next()) {
          ret += Author(
                results.getObject(1).asInstanceOf[UUID],
                results.getString(2),
                Option(results.getObject(3)).map { _ => results.getString(3) }
            )
      }
      ret.toList
    }
  }

}

